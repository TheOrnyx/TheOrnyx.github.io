(undo-tree-save-format-version . 1)
"6b5afda568dac327b09f98d6f09a349d7d3e5885"
[nil nil nil nil (25796 60382 338935 47000) 0 nil]
([nil nil ((1 . 3) (t 25796 59865 119642 714000)) nil (25796 60382 338933 197000) 0 nil])
([nil nil ((1 . 3) (#("h" 0 1 (part-side css)) . 1) (1 . 2) (#("h1" 0 2 (part-side css)) . -1) (undo-tree-id20 . -2) (undo-tree-id21 . -2) 3) nil (25796 60382 338931 260000) 0 nil])
([nil nil ((3 . 5) (#("{" 0 1 (part-side css face (rainbow-delimiters-depth-1-face))) . -3) (3 . 4)) nil (25796 60382 338927 187000) 0 nil])
([nil nil ((#("  " 0 2 (part-side css)) . 5) (5 . 7) (4 . 6)) nil (25796 60382 338925 140000) 0 nil])
([nil nil ((5 . 7)) nil (25796 60382 338923 398000) 0 nil])
([nil nil ((#("h" 0 1 (part-side css)) . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("1" 0 1 (part-side css)) . -2) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("{" 0 1 (part-side css face (rainbow-delimiters-depth-1-face))) . -3) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("
" 0 1 (part-side css)) . -4) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#(" " 0 1 (part-side css)) . -5) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#(" " 0 1 (part-side css)) . -6) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("
" 0 1 (part-side css)) . -7) (undo-tree-id16 . -1) (#("}" 0 1 (part-side css face (rainbow-delimiters-depth-1-face))) . -8) (undo-tree-id17 . -1) (undo-tree-id18 . 1) (undo-tree-id19 . -1) 9) nil (25796 60382 338919 943000) 0 nil])
([nil nil ((1 . 4)) nil (25796 60382 338903 689000) 0 nil])
([nil nil ((1 . 5) (#("h" 0 1 (part-side css)) . 1) (1 . 2) (#("html" 0 4 (part-side css)) . -1) (1 . 5) (#("htm" 0 3 (part-side css)) . -1) (undo-tree-id2 . -3) (undo-tree-id3 . -3) 4) nil (25796 60382 338901 637000) 0 nil])
([nil nil ((6 . 8) (#("{" 0 1 (part-side css face (rainbow-delimiters-depth-1-face))) . -6) (5 . 7)) nil (25796 60382 338897 383000) 0 nil])
([nil nil ((#("  " 0 2 (part-side css)) . 8) (8 . 10) (7 . 9)) nil (25796 60382 338895 331000) 0 nil])
([nil nil ((8 . 10)) nil (25796 60382 338893 440000) 0 nil])
([nil nil ((10 . 19)) nil (25796 60382 338892 85000) 0 nil])
([nil nil ((apply yas--snippet-revive 10 29 #s(yas--snippet nil nil #s(yas--exit 28 nil) 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 28 nil) 1 nil nil nil nil)) (10 . 29) (#("background-color: $0;" 0 17 (part-side css face web-mode-css-property-name-face) 17 18 (part-side css) 18 20 (part-side css face web-mode-css-variable-face) 20 21 (part-side css)) . 10) (10 . 31) (#("bac" 0 3 (part-side css)) . 10) (10 . 13) (#("background-color" 0 16 (part-side css)) . -10) (10 . 26) (#("backgroun" 0 9 (part-side css)) . -10) (undo-tree-id0 . -9) (undo-tree-id1 . -9) 19) nil (25796 60382 338888 891000) 0 nil])
([nil nil ((28 . 29)) nil (25796 60382 338865 492000) 0 nil])
([nil nil ((29 . 32)) nil (25796 60382 338864 217000) 0 nil])
([nil nil ((32 . 35)) nil (25796 60382 338862 295000) 0 nil])
([nil nil ((38 . 39)) nil (25796 60382 338857 11000) 0 nil])
([nil nil ((#("
" 0 1 (part-side css)) . 8) (undo-tree-id22 . 1) (#("  background-color: #00539f;" 0 2 (part-side css) 2 19 (part-side css face web-mode-css-property-name-face) 19 20 (part-side css) 20 24 (part-side css face ((:foreground "white") (:background "#00539f"))) 24 27 (part-side css face ((:foreground "white") (:background "#00539f"))) 27 28 (part-side css)) . -8) (undo-tree-id23 . 1) (undo-tree-id24 . -21) (undo-tree-id25 . -21) (undo-tree-id26 . -28) (undo-tree-id27 . -28) (undo-tree-id28 . -28) (undo-tree-id29 . -28) 36 (t 25796 60382 351563 499000)) nil (25796 60624 221171 135000) 0 nil])
([nil nil ((#("  " 0 2 (part-side css)) . 8) (8 . 10) (8 . 9)) nil (25796 60624 221154 197000) 0 nil])
([nil nil ((8 . 10)) nil (25796 60624 223679 858000) 0 nil])
([nil nil ((36 . 38) (#(" " 0 1 (part-side css)) . -10) (nil rear-nonsticky nil 138 . 139) (nil part-side css 137 . 139) (nil part-side css 136 . 137) (nil face (rainbow-delimiters-depth-2-face) 136 . 137) (nil part-side css 131 . 136) (nil part-side css 130 . 131) (nil face (rainbow-delimiters-depth-3-face (:background "#810CA8" :foreground "white")) 130 . 131) (nil part-side css 118 . 130) (nil face (:background "#810CA8" :foreground "white") 118 . 130) (nil part-side css 117 . 118) (nil face (rainbow-delimiters-depth-3-face (:background "#810CA8" :foreground "white")) 117 . 118) (nil part-side css 113 . 117) (nil face (:background "#810CA8" :foreground "white") 113 . 117) (nil part-side css 107 . 113) (nil part-side css 106 . 107) (nil face (rainbow-delimiters-depth-3-face (:background "#020024" :foreground "white")) 106 . 107) (nil part-side css 98 . 106) (nil face (:background "#020024" :foreground "white") 98 . 106) (nil part-side css 97 . 98) (nil face (rainbow-delimiters-depth-3-face (:background "#020024" :foreground "white")) 97 . 98) (nil part-side css 93 . 97) (nil face (:background "#020024" :foreground "white") 93 . 97) (nil part-side css 88 . 93) (nil part-side css 87 . 88) (nil face (rainbow-delimiters-depth-3-face (:background "#2D033B" :foreground "white")) 87 . 88) (nil part-side css 78 . 87) (nil face (:background "#2D033B" :foreground "white") 78 . 87) (nil part-side css 77 . 78) (nil face (rainbow-delimiters-depth-3-face (:background "#2D033B" :foreground "white")) 77 . 78) (nil part-side css 73 . 77) (nil face (:background "#2D033B" :foreground "white") 73 . 77) (nil part-side css 65 . 73) (nil part-side css 64 . 65) (nil face (rainbow-delimiters-depth-2-face) 64 . 65) (nil part-side css 49 . 64) (nil face web-mode-css-function-face 49 . 64) (nil part-side css 48 . 49) (nil part-side css 37 . 48) (nil face web-mode-css-property-name-face 37 . 48) (nil part-side css 35 . 37) (nil part-side css 34 . 35) (nil face (rainbow-delimiters-depth-2-face (:background "#2D033B" :foreground "white")) 34 . 35) (nil part-side css 27 . 34) (nil face (:background "#2D033B" :foreground "white") 27 . 34) (nil part-side css 26 . 27) (nil face (rainbow-delimiters-depth-2-face (:background "#2D033B" :foreground "white")) 26 . 27) (nil part-side css 23 . 26) (nil face (:background "#2D033B" :foreground "white") 23 . 26) (nil part-side css 22 . 23) (nil part-side css 11 . 22) (nil face web-mode-css-property-name-face 11 . 22) (nil part-side css 10 . 11) (10 . 139)) nil (25796 60635 259707 404000) 0 nil] [nil nil ((#("  " 0 2 (part-side css)) . -10) (nil rear-nonsticky nil 38 . 39) (nil part-side css 38 . 39) (nil part-side css 37 . 38) (nil part-side css 34 . 37) (nil face ((:foreground "white") (:background "#00539f")) 34 . 37) (nil part-side css 30 . 34) (nil face ((:foreground "white") (:background "#00539f")) 30 . 34) (nil part-side css 29 . 30) (nil part-side css 12 . 29) (nil face web-mode-css-property-name-face 12 . 29) (nil part-side css 10 . 12) (10 . 39)) ((#("  background-color: #00539f;
" 0 2 (part-side css) 2 19 (part-side css face web-mode-css-property-name-face) 19 20 (part-side css) 20 24 (part-side css face ((:foreground "white") (:background "#00539f"))) 24 27 (part-side css face ((:foreground "white") (:background "#00539f"))) 27 28 (part-side css) 28 29 (rear-nonsticky nil part-side css)) . 10) (undo-tree-id30 . -29) (undo-tree-id31 . -20) (undo-tree-id32 . -27) (undo-tree-id33 . -29) (undo-tree-id34 . -29) (undo-tree-id35 . -29) (undo-tree-id36 . -29) (undo-tree-id37 . -29) (undo-tree-id38 . -2) (nil face ((:foreground "white") (:background "#00539f")) 30 . 34) (nil face ((:foreground "white") (:background "#00539f")) 34 . 37) (nil rear-nonsticky t 38 . 39) (10 . 12)) (25796 60624 221144 700000) 0 nil])
([nil nil ((8 . 171) (#("  background: rgb(45,3,59);
  background: radial-gradient(circle, rgba(45,3,59,1) 5%, rgba(2,0,36,1) 48%, rgba(129,12,168,1) 100%); 
" 0 2 (part-side css) 2 13 (part-side css face web-mode-css-property-name-face) 13 14 (part-side css) 14 17 (part-side css face (:background "#2D033B" :foreground "white")) 17 18 (part-side css face (rainbow-delimiters-depth-2-face (:background "#2D033B" :foreground "white"))) 18 25 (part-side css face (:background "#2D033B" :foreground "white")) 25 26 (part-side css face (rainbow-delimiters-depth-2-face (:background "#2D033B" :foreground "white"))) 26 30 (part-side css) 30 41 (part-side css face web-mode-css-property-name-face) 41 42 (part-side css) 42 57 (part-side css face web-mode-css-function-face) 57 58 (part-side css face (rainbow-delimiters-depth-2-face)) 58 66 (part-side css) 66 70 (part-side css face (:background "#2D033B" :foreground "white")) 70 71 (part-side css face (rainbow-delimiters-depth-3-face (:background "#2D033B" :foreground "white"))) 71 80 (part-side css face (:background "#2D033B" :foreground "white")) 80 81 (part-side css face (rainbow-delimiters-depth-3-face (:background "#2D033B" :foreground "white"))) 81 86 (part-side css) 86 90 (part-side css face (:background "#020024" :foreground "white")) 90 91 (part-side css face (rainbow-delimiters-depth-3-face (:background "#020024" :foreground "white"))) 91 99 (part-side css face (:background "#020024" :foreground "white")) 99 100 (part-side css face (rainbow-delimiters-depth-3-face (:background "#020024" :foreground "white"))) 100 106 (part-side css) 106 110 (part-side css face (:background "#810CA8" :foreground "white")) 110 111 (part-side css face (rainbow-delimiters-depth-3-face (:background "#810CA8" :foreground "white"))) 111 123 (part-side css face (:background "#810CA8" :foreground "white")) 123 124 (part-side css face (rainbow-delimiters-depth-3-face (:background "#810CA8" :foreground "white"))) 124 129 (part-side css) 129 130 (part-side css face (rainbow-delimiters-depth-2-face)) 130 131 (part-side css) 131 132 (rear-nonsticky t part-side css) 132 133 (part-side css)) . -8) (undo-tree-id39 . -132) (undo-tree-id40 . -2) (undo-tree-id41 . -2) (undo-tree-id42 . -2) (undo-tree-id43 . -2) (undo-tree-id44 . -2) (undo-tree-id45 . -2) (undo-tree-id46 . -2) (undo-tree-id47 . -2) (undo-tree-id48 . -2) (undo-tree-id49 . -12) (undo-tree-id50 . -30) (undo-tree-id51 . -40) (undo-tree-id52 . -14) (undo-tree-id53 . -26) (undo-tree-id54 . -66) (undo-tree-id55 . -81) (undo-tree-id56 . -86) (undo-tree-id57 . -100) (undo-tree-id58 . -106) (undo-tree-id59 . -124) (undo-tree-id60 . -2) (undo-tree-id61 . -2) (undo-tree-id62 . -2) (undo-tree-id63 . -2) (undo-tree-id64 . -2) (undo-tree-id65 . -2) (undo-tree-id66 . -2) (undo-tree-id67 . -2) (undo-tree-id68 . -2) (undo-tree-id69 . -2) (undo-tree-id70 . -2) (undo-tree-id71 . -2) (undo-tree-id72 . -2) (undo-tree-id73 . -2) (undo-tree-id74 . -2) (undo-tree-id75 . -2) (undo-tree-id76 . -2) (undo-tree-id77 . -2) (undo-tree-id78 . -2) (undo-tree-id79 . -2) (undo-tree-id80 . -2) (undo-tree-id81 . -2) (undo-tree-id82 . -2) (undo-tree-id83 . -2) (undo-tree-id84 . -2) (undo-tree-id85 . -2) (undo-tree-id86 . -2) (undo-tree-id87 . -2) (undo-tree-id88 . -2) (undo-tree-id89 . -2) (undo-tree-id90 . -2) (undo-tree-id91 . -2) (undo-tree-id92 . -2) (undo-tree-id93 . -2) (undo-tree-id94 . -2) (undo-tree-id95 . -2) (undo-tree-id96 . -2) (undo-tree-id97 . -2) (undo-tree-id98 . -2) (undo-tree-id99 . -2) (undo-tree-id100 . -2) (undo-tree-id101 . -2) (undo-tree-id102 . -2) (undo-tree-id103 . -2) (undo-tree-id104 . -2) (undo-tree-id105 . -2) (undo-tree-id106 . -2) (undo-tree-id107 . -2) (undo-tree-id108 . -2) (undo-tree-id109 . -2) (undo-tree-id110 . -2) (undo-tree-id111 . -2) (undo-tree-id112 . -2) (undo-tree-id113 . -2) (undo-tree-id114 . -2) (undo-tree-id115 . -2) (undo-tree-id116 . -2) (undo-tree-id117 . -2) (undo-tree-id118 . -2) (undo-tree-id119 . -2) (undo-tree-id120 . -2) (undo-tree-id121 . -2) (undo-tree-id122 . -2) (undo-tree-id123 . -2) (undo-tree-id124 . -2) (undo-tree-id125 . -2) (undo-tree-id126 . -2) (undo-tree-id127 . -2) (undo-tree-id128 . -2) (undo-tree-id129 . -2) (undo-tree-id130 . -2) (undo-tree-id131 . -2) (undo-tree-id132 . -2) (undo-tree-id133 . -2) (undo-tree-id134 . -2) (undo-tree-id135 . -2) (undo-tree-id136 . -2) (undo-tree-id137 . -2) (undo-tree-id138 . -2) (undo-tree-id139 . -2) (undo-tree-id140 . -2) (undo-tree-id141 . -2) (undo-tree-id142 . -2) (undo-tree-id143 . -2) (undo-tree-id144 . -2) (undo-tree-id145 . -2) (undo-tree-id146 . -2) (undo-tree-id147 . -2) (undo-tree-id148 . -2) (undo-tree-id149 . -2) (undo-tree-id150 . -2) (undo-tree-id151 . -2) (undo-tree-id152 . -2) (undo-tree-id153 . -2) (undo-tree-id154 . -2) (undo-tree-id155 . -2) (undo-tree-id156 . -2) (undo-tree-id157 . -2) (undo-tree-id158 . -2) (undo-tree-id159 . -2) (undo-tree-id160 . -2) (undo-tree-id161 . -2) (undo-tree-id162 . -2) (undo-tree-id163 . -2) (undo-tree-id164 . -2) (undo-tree-id165 . -2) (undo-tree-id166 . -2) (undo-tree-id167 . -2) (undo-tree-id168 . -2) (undo-tree-id169 . -2) (undo-tree-id170 . -2) (undo-tree-id171 . -2) (undo-tree-id172 . -2) (undo-tree-id173 . -2) (undo-tree-id174 . -2) 10) nil (25796 60635 259680 368000) 0 nil])
nil
([nil nil ((#("  background: rgb(45, 3, 59);
  background: radial-gradient(
    circle,
    rgba(45, 3, 59, 1) 5%,
    rgba(2, 0, 36, 1) 48%,
    rgba(129, 12, 168, 1) 100%
  );" 0 2 (part-side css) 2 13 (part-side css face web-mode-css-property-name-face) 13 14 (part-side css) 14 17 (part-side css face (:background "#2D033B" :foreground "white")) 17 18 (part-side css face (rainbow-delimiters-depth-2-face (:background "#2D033B" :foreground "white"))) 18 27 (part-side css face (:background "#2D033B" :foreground "white")) 27 28 (part-side css face (rainbow-delimiters-depth-2-face (:background "#2D033B" :foreground "white"))) 28 32 (part-side css) 32 43 (part-side css face web-mode-css-property-name-face) 43 44 (part-side css) 44 59 (part-side css face web-mode-css-function-face) 59 60 (part-side css face (rainbow-delimiters-depth-2-face)) 60 77 (part-side css) 77 81 (part-side css face (:background "#2D033B" :foreground "white")) 81 82 (part-side css face (rainbow-delimiters-depth-3-face (:background "#2D033B" :foreground "white"))) 82 94 (part-side css face (:background "#2D033B" :foreground "white")) 94 95 (part-side css face (rainbow-delimiters-depth-3-face (:background "#2D033B" :foreground "white"))) 95 104 (part-side css) 104 108 (part-side css face (:background "#020024" :foreground "white")) 108 109 (part-side css face (rainbow-delimiters-depth-3-face (:background "#020024" :foreground "white"))) 109 120 (part-side css face (:background "#020024" :foreground "white")) 120 121 (part-side css face (rainbow-delimiters-depth-3-face (:background "#020024" :foreground "white"))) 121 131 (part-side css) 131 135 (part-side css face (:background "#810CA8" :foreground "white")) 135 136 (part-side css face (rainbow-delimiters-depth-3-face (:background "#810CA8" :foreground "white"))) 136 151 (part-side css face (:background "#810CA8" :foreground "white")) 151 152 (part-side css face (rainbow-delimiters-depth-3-face (:background "#810CA8" :foreground "white"))) 152 160 (part-side css) 160 161 (part-side css face (rainbow-delimiters-depth-2-face)) 161 162 (part-side css)) . 8) (undo-tree-id285 . -162) (undo-tree-id286 . -162) (undo-tree-id287 . -126) (undo-tree-id288 . -157) (undo-tree-id289 . -162) (undo-tree-id290 . -162) (t 25796 60635 271165 844000)) nil (25796 60777 422067 810000) 0 nil])
([nil nil ((36 . 38) (9 . 10) (nil rear-nonsticky nil 113 . 114) (nil part-side css 112 . 114) (nil part-side css 111 . 112) (nil face (rainbow-delimiters-depth-2-face) 111 . 112) (nil part-side css 106 . 111) (nil part-side css 105 . 106) (nil face (rainbow-delimiters-depth-3-face (:background "#11001C" :foreground "white")) 105 . 106) (nil part-side css 96 . 105) (nil face (:background "#11001C" :foreground "white") 96 . 105) (nil part-side css 95 . 96) (nil face (rainbow-delimiters-depth-3-face (:background "#11001C" :foreground "white")) 95 . 96) (nil part-side css 91 . 95) (nil face (:background "#11001C" :foreground "white") 91 . 95) (nil part-side css 85 . 91) (nil part-side css 84 . 85) (nil face (rainbow-delimiters-depth-3-face (:background "#220135" :foreground "white")) 84 . 85) (nil part-side css 75 . 84) (nil face (:background "#220135" :foreground "white") 75 . 84) (nil part-side css 74 . 75) (nil face (rainbow-delimiters-depth-3-face (:background "#220135" :foreground "white")) 74 . 75) (nil part-side css 70 . 74) (nil face (:background "#220135" :foreground "white") 70 . 74) (nil part-side css 63 . 70) (nil part-side css 62 . 63) (nil face (rainbow-delimiters-depth-2-face) 62 . 63) (nil part-side css 47 . 62) (nil face web-mode-css-function-face 47 . 62) (nil part-side css 46 . 47) (nil part-side css 35 . 46) (nil face web-mode-css-property-name-face 35 . 46) (nil part-side css 33 . 35) (nil part-side css 32 . 33) (nil face (rainbow-delimiters-depth-2-face (:background "#220135" :foreground "white")) 32 . 33) (nil part-side css 25 . 32) (nil face (:background "#220135" :foreground "white") 25 . 32) (nil part-side css 24 . 25) (nil face (rainbow-delimiters-depth-2-face (:background "#220135" :foreground "white")) 24 . 25) (nil part-side css 21 . 24) (nil face (:background "#220135" :foreground "white") 21 . 24) (nil part-side css 20 . 21) (nil part-side css 9 . 20) (nil face web-mode-css-property-name-face 9 . 20) (nil part-side css 8 . 9) (8 . 114)) nil (25796 60777 422057 197000) 0 nil])
([nil nil ((8 . 141) (#("  background: rgb(34,1,53);
  background: linear-gradient(90deg, rgba(34,1,53,1) 37%, rgba(17,0,28,1) 100%); 
" 0 2 (part-side css) 2 13 (part-side css face web-mode-css-property-name-face) 13 14 (part-side css) 14 17 (part-side css face (:background "#220135" :foreground "white")) 17 18 (part-side css face (rainbow-delimiters-depth-2-face (:background "#220135" :foreground "white"))) 18 25 (part-side css face (:background "#220135" :foreground "white")) 25 26 (part-side css face (rainbow-delimiters-depth-2-face (:background "#220135" :foreground "white"))) 26 30 (part-side css) 30 41 (part-side css face web-mode-css-property-name-face) 41 42 (part-side css) 42 57 (part-side css face web-mode-css-function-face) 57 58 (part-side css face (rainbow-delimiters-depth-2-face)) 58 65 (part-side css) 65 69 (part-side css face (:background "#220135" :foreground "white")) 69 70 (part-side css face (rainbow-delimiters-depth-3-face (:background "#220135" :foreground "white"))) 70 79 (part-side css face (:background "#220135" :foreground "white")) 79 80 (part-side css face (rainbow-delimiters-depth-3-face (:background "#220135" :foreground "white"))) 80 86 (part-side css) 86 90 (part-side css face (:background "#11001C" :foreground "white")) 90 91 (part-side css face (rainbow-delimiters-depth-3-face (:background "#11001C" :foreground "white"))) 91 100 (part-side css face (:background "#11001C" :foreground "white")) 100 101 (part-side css face (rainbow-delimiters-depth-3-face (:background "#11001C" :foreground "white"))) 101 106 (part-side css) 106 107 (part-side css face (rainbow-delimiters-depth-2-face)) 107 108 (part-side css) 108 109 (rear-nonsticky t part-side css) 109 110 (part-side css)) . -8) (undo-tree-id175 . -109) (undo-tree-id176 . -14) (undo-tree-id177 . -26) (undo-tree-id178 . -65) (undo-tree-id179 . -80) (undo-tree-id180 . -86) (undo-tree-id181 . -101) (undo-tree-id182 . -109) (undo-tree-id183 . -109) (undo-tree-id184 . -109) (undo-tree-id185 . -109) (undo-tree-id186 . -109) (undo-tree-id187 . -109) (undo-tree-id188 . -109) (undo-tree-id189 . -109) (undo-tree-id190 . -109) (undo-tree-id191 . -109) (undo-tree-id192 . -109) (undo-tree-id193 . -109) (undo-tree-id194 . -109) (undo-tree-id195 . -109) (undo-tree-id196 . -109) (undo-tree-id197 . -109) (undo-tree-id198 . -109) (undo-tree-id199 . -109) (undo-tree-id200 . -109) (undo-tree-id201 . -109) (undo-tree-id202 . -109) (undo-tree-id203 . -109) (undo-tree-id204 . -109) (undo-tree-id205 . -109) (undo-tree-id206 . -109) (undo-tree-id207 . -109) (undo-tree-id208 . -109) (undo-tree-id209 . -109) (undo-tree-id210 . -109) (undo-tree-id211 . -109) (undo-tree-id212 . -109) (undo-tree-id213 . -109) (undo-tree-id214 . -109) (undo-tree-id215 . -109) (undo-tree-id216 . -109) (undo-tree-id217 . -109) (undo-tree-id218 . -109) (undo-tree-id219 . -109) (undo-tree-id220 . -109) (undo-tree-id221 . -109) (undo-tree-id222 . -109) (undo-tree-id223 . -109) (undo-tree-id224 . -109) (undo-tree-id225 . -109) (undo-tree-id226 . -109) (undo-tree-id227 . -109) (undo-tree-id228 . -109) (undo-tree-id229 . -109) (undo-tree-id230 . -109) (undo-tree-id231 . -109) (undo-tree-id232 . -109) (undo-tree-id233 . -109) (undo-tree-id234 . -109) (undo-tree-id235 . -109) (undo-tree-id236 . -109) (undo-tree-id237 . -109) (undo-tree-id238 . -109) (undo-tree-id239 . -109) (undo-tree-id240 . -109) (undo-tree-id241 . -109) (undo-tree-id242 . -109) (undo-tree-id243 . -109) (undo-tree-id244 . -109) (undo-tree-id245 . -109) (undo-tree-id246 . -109) (undo-tree-id247 . -109) (undo-tree-id248 . -109) (undo-tree-id249 . -109) (undo-tree-id250 . -109) (undo-tree-id251 . -109) (undo-tree-id252 . -109) (undo-tree-id253 . -109) (undo-tree-id254 . -109) (undo-tree-id255 . -109) (undo-tree-id256 . -109) (undo-tree-id257 . -109) (undo-tree-id258 . -109) (undo-tree-id259 . -109) (undo-tree-id260 . -109) (undo-tree-id261 . -109) (undo-tree-id262 . -109) (undo-tree-id263 . -109) (undo-tree-id264 . -109) (undo-tree-id265 . -109) (undo-tree-id266 . -109) (undo-tree-id267 . -109) (undo-tree-id268 . -109) (undo-tree-id269 . -109) (undo-tree-id270 . -109) (undo-tree-id271 . -109) (undo-tree-id272 . -109) (undo-tree-id273 . -109) (undo-tree-id274 . -109) (undo-tree-id275 . -109) (undo-tree-id276 . -109) (undo-tree-id277 . -109) (undo-tree-id278 . -109) (undo-tree-id279 . -109) (undo-tree-id280 . -109) (undo-tree-id281 . -109) (undo-tree-id282 . -109) (undo-tree-id283 . -109) (undo-tree-id284 . -109) 117) nil (25796 60777 422036 35000) 0 nil])
([nil nil ((142 . 144) (t 25796 60777 434947 19000)) nil (25796 60834 102293 583000) 0 nil])
([nil nil ((144 . 147)) nil (25796 60834 102291 869000) 0 nil])
([nil nil ((144 . 148) (#("b" 0 1 (part-side css)) . 144) (144 . 145) (#("body" 0 4 (part-side css)) . -144) (144 . 148) (#("bod" 0 3 (part-side css)) . -144) (undo-tree-id395 . -3) (undo-tree-id396 . -3) (undo-tree-id397 . -2) (undo-tree-id398 . -3) (undo-tree-id399 . -2) (undo-tree-id400 . -3) (undo-tree-id401 . -3) (undo-tree-id402 . -3) (undo-tree-id403 . -3) (undo-tree-id404 . -3) (undo-tree-id405 . -3) (undo-tree-id406 . -3) (undo-tree-id407 . -3) (undo-tree-id408 . -3) (undo-tree-id409 . -3) (undo-tree-id410 . -3) (undo-tree-id411 . -3) (undo-tree-id412 . -3) (undo-tree-id413 . -3) (undo-tree-id414 . -3) (undo-tree-id415 . -3) (undo-tree-id416 . -3) (undo-tree-id417 . -3) (undo-tree-id418 . -3) (undo-tree-id419 . -3) (undo-tree-id420 . -3) (undo-tree-id421 . -3) (undo-tree-id422 . -3) (undo-tree-id423 . -3) (undo-tree-id424 . -3) 147) nil (25796 60838 612555 809000) 0 nil])
([nil nil ((149 . 151) (#("{" 0 1 (part-side css face (rainbow-delimiters-depth-1-face))) . -149) (148 . 150)) nil (25796 60931 813497 964000) 0 nil] [nil nil ((144 . 157) (#("body" 0 4 (part-side css)) . -144) (undo-tree-id599 . -4) (undo-tree-id600 . -4) (undo-tree-id601 . -4) (undo-tree-id602 . -4) (undo-tree-id603 . -4) (undo-tree-id604 . -4) (undo-tree-id605 . -4) (undo-tree-id606 . -4) (undo-tree-id607 . -4) (undo-tree-id608 . -4) (undo-tree-id609 . -4) (undo-tree-id610 . -4) (undo-tree-id611 . -4) (undo-tree-id612 . -4) (undo-tree-id613 . -4) (undo-tree-id614 . -4) (undo-tree-id615 . -4) (undo-tree-id616 . -4) (undo-tree-id617 . -4) (undo-tree-id618 . -4) (undo-tree-id619 . -4) (undo-tree-id620 . -4) (undo-tree-id621 . -4) (undo-tree-id622 . -4) (undo-tree-id623 . -4) (undo-tree-id624 . -4) (undo-tree-id625 . -4) (undo-tree-id626 . -4) (undo-tree-id627 . -4) (undo-tree-id628 . -4) (undo-tree-id629 . -4) (undo-tree-id630 . -4) (undo-tree-id631 . -4) (undo-tree-id632 . -4) (undo-tree-id633 . -4) (undo-tree-id634 . -4) (undo-tree-id635 . -4) (undo-tree-id636 . -4) (undo-tree-id637 . -4) (undo-tree-id638 . -4) (undo-tree-id639 . -4) (undo-tree-id640 . -4) (undo-tree-id641 . -4) (undo-tree-id642 . -4) (undo-tree-id643 . -4) (undo-tree-id644 . -4) (undo-tree-id645 . -4) (undo-tree-id646 . -4) (undo-tree-id647 . -4) (undo-tree-id648 . -4) (undo-tree-id649 . -4) (undo-tree-id650 . -4) (undo-tree-id651 . -4) (undo-tree-id652 . -4) (undo-tree-id653 . -4) (undo-tree-id654 . -4) (undo-tree-id655 . -4) (undo-tree-id656 . -4) (undo-tree-id657 . -4) (undo-tree-id658 . -4) (undo-tree-id659 . -4) (undo-tree-id660 . -4) (undo-tree-id661 . -4) (undo-tree-id662 . -4) (undo-tree-id663 . -4) (undo-tree-id664 . -4) (undo-tree-id665 . -4) (undo-tree-id666 . -4) (undo-tree-id667 . -4) (undo-tree-id668 . -4) (undo-tree-id669 . -4) (undo-tree-id670 . -4) (undo-tree-id671 . -4) (undo-tree-id672 . -4) (undo-tree-id673 . -4) (undo-tree-id674 . -4) (undo-tree-id675 . -4) (undo-tree-id676 . -4) (undo-tree-id677 . -4) (undo-tree-id678 . -4) (undo-tree-id679 . -4) (undo-tree-id680 . -4) (undo-tree-id681 . -4) (undo-tree-id682 . -4) (undo-tree-id683 . -4) (undo-tree-id684 . -4) (undo-tree-id685 . -4) (undo-tree-id686 . -4) (undo-tree-id687 . -4) (undo-tree-id688 . -4) (undo-tree-id689 . -4) (undo-tree-id690 . -4) (undo-tree-id691 . -4) (undo-tree-id692 . -4) (undo-tree-id693 . -4) (undo-tree-id694 . -4) (undo-tree-id695 . -4) (undo-tree-id696 . -4) (undo-tree-id697 . -4) (undo-tree-id698 . -4) (undo-tree-id699 . -4) (undo-tree-id700 . -4) (undo-tree-id701 . -4) (undo-tree-id702 . -4) (undo-tree-id703 . -4) (undo-tree-id704 . -4) (undo-tree-id705 . -4) (undo-tree-id706 . -4) (undo-tree-id707 . -4) (undo-tree-id708 . -4) (undo-tree-id709 . -4) (undo-tree-id710 . -4) (undo-tree-id711 . -4) (undo-tree-id712 . -4) (undo-tree-id713 . -4) (undo-tree-id714 . -4) (undo-tree-id715 . -4) (undo-tree-id716 . -4) (undo-tree-id717 . -4) (undo-tree-id718 . -4) (undo-tree-id719 . -4) (undo-tree-id720 . -4) (undo-tree-id721 . -4) (undo-tree-id722 . -4) (undo-tree-id723 . -4) (undo-tree-id724 . -4) (undo-tree-id725 . -4) (undo-tree-id726 . -4) (undo-tree-id727 . -4) (undo-tree-id728 . -4) (undo-tree-id729 . -4) (undo-tree-id730 . -4) (undo-tree-id731 . -4) (undo-tree-id732 . -4) (undo-tree-id733 . -4) (undo-tree-id734 . -4) (undo-tree-id735 . -4) (undo-tree-id736 . -4) (undo-tree-id737 . -4) (undo-tree-id738 . -4) (undo-tree-id739 . -4) (undo-tree-id740 . -4) (undo-tree-id741 . -4) (undo-tree-id742 . -4) (undo-tree-id743 . -4) (undo-tree-id744 . -4) (undo-tree-id745 . -4) (undo-tree-id746 . -4) (undo-tree-id747 . -4) (undo-tree-id748 . -4) (undo-tree-id749 . -4) (undo-tree-id750 . -4) (undo-tree-id751 . -4) (undo-tree-id752 . -4) (undo-tree-id753 . -4) (undo-tree-id754 . -4) (undo-tree-id755 . -4) (undo-tree-id756 . -4) (undo-tree-id757 . -4) (undo-tree-id758 . -4) (undo-tree-id759 . -4) (undo-tree-id760 . -4) (undo-tree-id761 . -4) (undo-tree-id762 . -4) (undo-tree-id763 . -4) (undo-tree-id764 . -4) (undo-tree-id765 . -4) (undo-tree-id766 . -4) (undo-tree-id767 . -4) (undo-tree-id768 . -4) (undo-tree-id769 . -4) (undo-tree-id770 . -4) (undo-tree-id771 . -4) (undo-tree-id772 . -4) (undo-tree-id773 . -4) (undo-tree-id774 . -4) (undo-tree-id775 . -4) (undo-tree-id776 . -4) (undo-tree-id777 . -4) (undo-tree-id778 . -4) (undo-tree-id779 . -4) (undo-tree-id780 . -4) (undo-tree-id781 . -4) (undo-tree-id782 . -4) (undo-tree-id783 . -4) (undo-tree-id784 . -4) (undo-tree-id785 . -4) (undo-tree-id786 . -4) (undo-tree-id787 . -4) (undo-tree-id788 . -4) (undo-tree-id789 . -4) (undo-tree-id790 . -4) (undo-tree-id791 . -4) (undo-tree-id792 . -4) (undo-tree-id793 . -4) (undo-tree-id794 . -4) (undo-tree-id795 . -4) (undo-tree-id796 . -4) (undo-tree-id797 . -4) (undo-tree-id798 . -4) (undo-tree-id799 . -4) (undo-tree-id800 . -4) (undo-tree-id801 . -4) (undo-tree-id802 . -4) (undo-tree-id803 . -4) (undo-tree-id804 . -4) (undo-tree-id805 . -4) (undo-tree-id806 . -4) (undo-tree-id807 . -4) (undo-tree-id808 . -4) (undo-tree-id809 . -4) (undo-tree-id810 . -4) (undo-tree-id811 . -4) (undo-tree-id812 . -4) (undo-tree-id813 . -4) (undo-tree-id814 . -4) (undo-tree-id815 . -4) (undo-tree-id816 . -4) (undo-tree-id817 . -4) (undo-tree-id818 . -4) (undo-tree-id819 . -4) (undo-tree-id820 . -4) (undo-tree-id821 . -4) (undo-tree-id822 . -4) (undo-tree-id823 . -4) (undo-tree-id824 . -4) (undo-tree-id825 . -4) (undo-tree-id826 . -4) (undo-tree-id827 . -4) (undo-tree-id828 . -4) (undo-tree-id829 . -4) (undo-tree-id830 . -4) (undo-tree-id831 . -4) (undo-tree-id832 . -4) (undo-tree-id833 . -4) (undo-tree-id834 . -4) (undo-tree-id835 . -4) (undo-tree-id836 . -4) (undo-tree-id837 . -4) (undo-tree-id838 . -4) (undo-tree-id839 . -4) (undo-tree-id840 . -4) (undo-tree-id841 . -4) (undo-tree-id842 . -4) (undo-tree-id843 . -4) (undo-tree-id844 . -4) (undo-tree-id845 . -4) (undo-tree-id846 . -4) (undo-tree-id847 . -4) (undo-tree-id848 . -4) (undo-tree-id849 . -4) (undo-tree-id850 . -4) (undo-tree-id851 . -4) (undo-tree-id852 . -4) (undo-tree-id853 . -4) (undo-tree-id854 . -4) (undo-tree-id855 . -4) (undo-tree-id856 . -4) (undo-tree-id857 . -4) (undo-tree-id858 . -4) (undo-tree-id859 . -4) (undo-tree-id860 . -4) (undo-tree-id861 . -4) (undo-tree-id862 . -4) (undo-tree-id863 . -4) (undo-tree-id864 . -4) (undo-tree-id865 . -4) (undo-tree-id866 . -4) (undo-tree-id867 . -4) (undo-tree-id868 . -4) (undo-tree-id869 . -4) (undo-tree-id870 . -4) (undo-tree-id871 . -4) (undo-tree-id872 . -4) (undo-tree-id873 . -4) (undo-tree-id874 . -4) (undo-tree-id875 . -4) (undo-tree-id876 . -4) (undo-tree-id877 . -4) (undo-tree-id878 . -4) (undo-tree-id879 . -4) (undo-tree-id880 . -4) (undo-tree-id881 . -4) (undo-tree-id882 . -4) (undo-tree-id883 . -4) (undo-tree-id884 . -4) (undo-tree-id885 . -4) (undo-tree-id886 . -4) (undo-tree-id887 . -4) (undo-tree-id888 . -4) (undo-tree-id889 . -4) (undo-tree-id890 . -4) (undo-tree-id891 . -4) (undo-tree-id892 . -4) (undo-tree-id893 . -4) (undo-tree-id894 . -4) (undo-tree-id895 . -4) (undo-tree-id896 . -4) (undo-tree-id897 . -4) (undo-tree-id898 . -4) (undo-tree-id899 . -4) (undo-tree-id900 . -4) (undo-tree-id901 . -4) (undo-tree-id902 . -4) (undo-tree-id903 . -4) (undo-tree-id904 . -4) (undo-tree-id905 . -4) (undo-tree-id906 . -4) (undo-tree-id907 . -4) (undo-tree-id908 . -4) (undo-tree-id909 . -4) (undo-tree-id910 . -4) (undo-tree-id911 . -4) (undo-tree-id912 . -4) (undo-tree-id913 . -4) (undo-tree-id914 . -4) (undo-tree-id915 . -4) (undo-tree-id916 . -4) (undo-tree-id917 . -4) (undo-tree-id918 . -4) (undo-tree-id919 . -4) (undo-tree-id920 . -4) (undo-tree-id921 . -4) (undo-tree-id922 . -4) (undo-tree-id923 . -4) (undo-tree-id924 . -4) (undo-tree-id925 . -4) (undo-tree-id926 . -4) (undo-tree-id927 . -4) (undo-tree-id928 . -4) (undo-tree-id929 . -4) (undo-tree-id930 . -4) (undo-tree-id931 . -4) (undo-tree-id932 . -4) (undo-tree-id933 . -4) (undo-tree-id934 . -4) (undo-tree-id935 . -4) (undo-tree-id936 . -4) (undo-tree-id937 . -4) (undo-tree-id938 . -4) (undo-tree-id939 . -4) (undo-tree-id940 . -4) (undo-tree-id941 . -4) (undo-tree-id942 . -4) (undo-tree-id943 . -4) (undo-tree-id944 . -4) (undo-tree-id945 . -4) (undo-tree-id946 . -4) (undo-tree-id947 . -4) (undo-tree-id948 . -4) (undo-tree-id949 . -4) (undo-tree-id950 . -4) (undo-tree-id951 . -4) (undo-tree-id952 . -4) (undo-tree-id953 . -4) (undo-tree-id954 . -4) (undo-tree-id955 . -4) (undo-tree-id956 . -4) (undo-tree-id957 . -4) (undo-tree-id958 . -4) (undo-tree-id959 . -4) 148) ((144 . 148) (#("<body></body>" 0 13 (part-side css)) . 144) (undo-tree-id960 . -6) (undo-tree-id961 . -6) (undo-tree-id962 . -1) (undo-tree-id963 . -6) (undo-tree-id964 . -7) (undo-tree-id965 . -5) (undo-tree-id966 . -6) (undo-tree-id967 . -6)) (25796 60838 610991 194000) 0 nil] [nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 149 149 nil nil nil nil #s(yas--exit 151 nil))) #s(yas--exit 151 nil) 3 nil #s(yas--field 1 149 149 nil nil nil nil #s(yas--exit 151 nil)) nil nil)) (#("  " 0 2 (part-side css)) . -151) (undo-tree-id434 . -2) (144 . 161) (#("body" 0 4 (part-side css)) . 144) (undo-tree-id435 . -4) (undo-tree-id436 . -4) (undo-tree-id437 . -4) (undo-tree-id438 . -4) (undo-tree-id439 . -4) (undo-tree-id440 . -4) (undo-tree-id441 . -4) (undo-tree-id442 . -4) (undo-tree-id443 . -4) (undo-tree-id444 . -4) (undo-tree-id445 . -4) (undo-tree-id446 . -4) (undo-tree-id447 . -4) (undo-tree-id448 . -4) (undo-tree-id449 . -4) (undo-tree-id450 . -4) (undo-tree-id451 . -4) (undo-tree-id452 . -4) (undo-tree-id453 . -4) (undo-tree-id454 . -4) (undo-tree-id455 . -4) (undo-tree-id456 . -4) (undo-tree-id457 . -4) (undo-tree-id458 . -4) (undo-tree-id459 . -4) (undo-tree-id460 . -4) (undo-tree-id461 . -4) (undo-tree-id462 . -4) (undo-tree-id463 . -4) (undo-tree-id464 . -4) (undo-tree-id465 . -4) (undo-tree-id466 . -4) (undo-tree-id467 . -4) (undo-tree-id468 . -4) (undo-tree-id469 . -4) (undo-tree-id470 . -4) (undo-tree-id471 . -4) (undo-tree-id472 . -4) (undo-tree-id473 . -4) (undo-tree-id474 . -4) (undo-tree-id475 . -4) (undo-tree-id476 . -4) (undo-tree-id477 . -4) (undo-tree-id478 . -4) (undo-tree-id479 . -4) (undo-tree-id480 . -4) (undo-tree-id481 . -4) (undo-tree-id482 . -4) (undo-tree-id483 . -4) (undo-tree-id484 . -4) (undo-tree-id485 . -4) (undo-tree-id486 . -4) (undo-tree-id487 . -4) (undo-tree-id488 . -4) (undo-tree-id489 . -4) (undo-tree-id490 . -4) (undo-tree-id491 . -4) (undo-tree-id492 . -4) (undo-tree-id493 . -4) (undo-tree-id494 . -4) (undo-tree-id495 . -4) (undo-tree-id496 . -4) (undo-tree-id497 . -4) (undo-tree-id498 . -4) (undo-tree-id499 . -4) (undo-tree-id500 . -4) (undo-tree-id501 . -4) (undo-tree-id502 . -4) (undo-tree-id503 . -4) (undo-tree-id504 . -4) (undo-tree-id505 . -4) (undo-tree-id506 . -4) (undo-tree-id507 . -4) (undo-tree-id508 . -4) (undo-tree-id509 . -4) (undo-tree-id510 . -4) (undo-tree-id511 . -4) (undo-tree-id512 . -4) (undo-tree-id513 . -4) (undo-tree-id514 . -4) (undo-tree-id515 . -4) (undo-tree-id516 . -4) (undo-tree-id517 . -4) (undo-tree-id518 . -4) (undo-tree-id519 . -4) (undo-tree-id520 . -4) (undo-tree-id521 . -4) (undo-tree-id522 . -4) (undo-tree-id523 . -4) (undo-tree-id524 . -4) (undo-tree-id525 . -4) (undo-tree-id526 . -4) (undo-tree-id527 . -4) (undo-tree-id528 . -4) (undo-tree-id529 . -4) (undo-tree-id530 . -4) (undo-tree-id531 . -4) (undo-tree-id532 . -4) (undo-tree-id533 . -4) (undo-tree-id534 . -4) (undo-tree-id535 . -4) (undo-tree-id536 . -4) (undo-tree-id537 . -4) (undo-tree-id538 . -4) (undo-tree-id539 . -4) (undo-tree-id540 . -4) (undo-tree-id541 . -4) (undo-tree-id542 . -4) (undo-tree-id543 . -4) (undo-tree-id544 . -4) (undo-tree-id545 . -4) (undo-tree-id546 . -4) (undo-tree-id547 . -4) (undo-tree-id548 . -4) (undo-tree-id549 . -4) (undo-tree-id550 . -4) (undo-tree-id551 . -4) (undo-tree-id552 . -4) (undo-tree-id553 . -4) (undo-tree-id554 . -4) (undo-tree-id555 . -4) (undo-tree-id556 . -4) (undo-tree-id557 . -4) (undo-tree-id558 . -4) (undo-tree-id559 . -4) (undo-tree-id560 . -4) (undo-tree-id561 . -4) (undo-tree-id562 . -4) (undo-tree-id563 . -4) (undo-tree-id564 . -4) (undo-tree-id565 . -4) (undo-tree-id566 . -4) (undo-tree-id567 . -4) (undo-tree-id568 . -4) (undo-tree-id569 . -4) (undo-tree-id570 . -4) (undo-tree-id571 . -4) (undo-tree-id572 . -4) (undo-tree-id573 . -4) (undo-tree-id574 . -4) (undo-tree-id575 . -4) (undo-tree-id576 . -4) (undo-tree-id577 . -4) (undo-tree-id578 . -4) (undo-tree-id579 . -4) (undo-tree-id580 . -4) (undo-tree-id581 . -4) (undo-tree-id582 . -4) (undo-tree-id583 . -4) (undo-tree-id584 . -4) (undo-tree-id585 . -4) (undo-tree-id586 . -4) (undo-tree-id587 . -4) (undo-tree-id588 . -4) (undo-tree-id589 . -4) 148) ((144 . 148) (#("<body>
  
</body>" 0 7 (part-side css) 7 9 (part-side css) 9 17 (part-side css)) . 144) (undo-tree-id590 . -5) (undo-tree-id591 . -5) (undo-tree-id592 . -17) (undo-tree-id593 . -1) (undo-tree-id594 . -10) (undo-tree-id595 . -11) (undo-tree-id596 . -5) (undo-tree-id597 . -7) (undo-tree-id598 . -9) (151 . 153) (apply yas--snippet-revive 144 159 #s(yas--snippet nil (#s(yas--field 1 149 149 nil nil nil nil #s(yas--exit 151 nil))) #s(yas--exit 151 nil) 3 nil #s(yas--field 1 149 149 nil nil nil nil #s(yas--exit 151 nil)) nil nil))) (25796 60835 178606 973000) 0 nil] [nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 149 149 nil nil nil nil #s(yas--exit 151 nil))) #s(yas--exit 151 nil) 2 nil #s(yas--field 1 149 149 nil nil nil nil #s(yas--exit 151 nil)) nil nil)) (#("  " 0 2 (part-side css)) . -151) (undo-tree-id291 . -2) (144 . 161) (#("body" 0 4 (part-side css)) . 144) (undo-tree-id292 . -4) (undo-tree-id293 . -4) (undo-tree-id294 . -4) (undo-tree-id295 . -4) (undo-tree-id296 . -4) (undo-tree-id297 . -4) (undo-tree-id298 . -4) (undo-tree-id299 . -4) (undo-tree-id300 . -4) (undo-tree-id301 . -4) (undo-tree-id302 . -4) (undo-tree-id303 . -4) (undo-tree-id304 . -4) (undo-tree-id305 . -4) (undo-tree-id306 . -4) (undo-tree-id307 . -4) (undo-tree-id308 . -4) (undo-tree-id309 . -4) (undo-tree-id310 . -4) (undo-tree-id311 . -4) (undo-tree-id312 . -4) (undo-tree-id313 . -4) (undo-tree-id314 . -4) (undo-tree-id315 . -4) (undo-tree-id316 . -4) (undo-tree-id317 . -4) (undo-tree-id318 . -4) (undo-tree-id319 . -4) (undo-tree-id320 . -4) (undo-tree-id321 . -4) (undo-tree-id322 . -4) (undo-tree-id323 . -4) (undo-tree-id324 . -4) (undo-tree-id325 . -4) (undo-tree-id326 . -4) (undo-tree-id327 . -4) (undo-tree-id328 . -4) (undo-tree-id329 . -4) (undo-tree-id330 . -4) (undo-tree-id331 . -4) (undo-tree-id332 . -4) (undo-tree-id333 . -4) (undo-tree-id334 . -4) (undo-tree-id335 . -4) (undo-tree-id336 . -4) (undo-tree-id337 . -4) (undo-tree-id338 . -4) (undo-tree-id339 . -4) (undo-tree-id340 . -4) (undo-tree-id341 . -4) (undo-tree-id342 . -4) (undo-tree-id343 . -4) (undo-tree-id344 . -4) (undo-tree-id345 . -4) (undo-tree-id346 . -4) (undo-tree-id347 . -4) (undo-tree-id348 . -4) (undo-tree-id349 . -4) (undo-tree-id350 . -4) (undo-tree-id351 . -4) (undo-tree-id352 . -4) (undo-tree-id353 . -4) (undo-tree-id354 . -4) (undo-tree-id355 . -4) (undo-tree-id356 . -4) (undo-tree-id357 . -4) (undo-tree-id358 . -4) (undo-tree-id359 . -4) (undo-tree-id360 . -4) (undo-tree-id361 . -4) (undo-tree-id362 . -4) (undo-tree-id363 . -4) (undo-tree-id364 . -4) (undo-tree-id365 . -4) (undo-tree-id366 . -4) (undo-tree-id367 . -4) (undo-tree-id368 . -4) (undo-tree-id369 . -4) (undo-tree-id370 . -4) (undo-tree-id371 . -4) (undo-tree-id372 . -4) (undo-tree-id373 . -4) (undo-tree-id374 . -4) (undo-tree-id375 . -4) (undo-tree-id376 . -4) (undo-tree-id377 . -4) (undo-tree-id378 . -4) (undo-tree-id379 . -4) (undo-tree-id380 . -4) (undo-tree-id381 . -4) (undo-tree-id382 . -4) (undo-tree-id383 . -4) (undo-tree-id384 . -4) (undo-tree-id385 . -4) (undo-tree-id386 . -4) (undo-tree-id387 . -4) (undo-tree-id388 . -4) (undo-tree-id389 . -4) (undo-tree-id390 . -4) (undo-tree-id391 . -4) (undo-tree-id392 . -4) (undo-tree-id393 . -4) (undo-tree-id394 . -4) 148) ((144 . 148) (#("<body>
  
</body>" 0 7 (part-side css) 7 9 (part-side css) 9 17 (part-side css)) . 144) (undo-tree-id425 . -5) (undo-tree-id426 . -5) (undo-tree-id427 . -17) (undo-tree-id428 . -1) (undo-tree-id429 . -10) (undo-tree-id430 . -11) (undo-tree-id431 . -5) (undo-tree-id432 . -7) (undo-tree-id433 . -9) (151 . 153) (apply yas--snippet-revive 144 159 #s(yas--snippet nil (#s(yas--field 1 149 149 nil nil nil nil #s(yas--exit 151 nil))) #s(yas--exit 151 nil) 2 nil #s(yas--field 1 149 149 nil nil nil nil #s(yas--exit 151 nil)) nil nil))) (25796 60834 102249 121000) 0 nil])
([nil nil ((#("  " 0 2 (part-side css)) . 151) (151 . 153) (150 . 152)) nil (25796 60931 813496 247000) 0 nil])
nil
nil
nil
([nil nil ((151 . 153)) nil (25796 60931 813494 797000) 0 nil])
([nil nil ((153 . 156)) nil (25796 60931 813493 848000) 0 nil])
([nil nil ((apply yas--snippet-revive 153 161 #s(yas--snippet nil nil #s(yas--exit 160 nil) 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 160 nil) 4 nil nil nil nil)) (153 . 161) (#("width: $0;" 0 6 (part-side css face web-mode-css-property-name-face) 6 7 (part-side css) 7 9 (part-side css face web-mode-css-variable-face) 9 10 (part-side css)) . 153) (153 . 163) (#("w" 0 1 (part-side css)) . 153) (153 . 154) (#("width" 0 5 (part-side css)) . -153) (153 . 158) (#("wid" 0 3 (part-side css)) . -153) (undo-tree-id1166 . -3) (undo-tree-id1167 . -3) 156) nil (25796 60931 813491 798000) 0 nil])
([nil nil ((160 . 163)) nil (25796 60931 813486 986000) 0 nil])
([nil nil ((160 . 164) (#("600" 0 3 (part-side css)) . 160) (160 . 163) (#("600%" 0 4 (part-side css)) . -160) (160 . 164) (#("600" 0 3 (part-side css)) . -160) (undo-tree-id1164 . -3) (undo-tree-id1165 . -3) 163) nil (25796 60931 813485 300000) 0 nil])
([nil nil ((165 . 168)) nil (25796 60931 813481 290000) 0 nil])
([nil nil ((#("6" 0 1 (part-side css)) . -160) (undo-tree-id1160 . -1) (#("0" 0 1 (part-side css)) . -161) (undo-tree-id1161 . -1) (#("0" 0 1 (part-side css)) . -162) (undo-tree-id1162 . -1) (#("%" 0 1 (part-side css)) . -163) (undo-tree-id1163 . -1) 164) nil (25796 60931 813479 302000) 0 nil])
([nil nil ((160 . 162)) nil (25796 60931 813474 308000) 0 nil])
([nil nil ((160 . 163) (#("50" 0 2 (part-side css)) . 160) (160 . 162) (#("50%" 0 3 (part-side css)) . -160) (160 . 163) (#("50" 0 2 (part-side css)) . -160) (undo-tree-id1158 . -2) (undo-tree-id1159 . -2) 162) nil (25796 60931 813472 280000) 0 nil])
([nil nil ((164 . 167)) nil (25796 60931 813468 28000) 0 nil])
([nil nil ((#("
" 0 1 (part-side css)) . 167)) nil (25796 60931 813466 994000) 0 nil])
([nil nil ((167 . 171)) nil (25796 60931 813466 123000) 0 nil])
([nil nil ((apply yas--snippet-revive 167 176 #s(yas--snippet nil nil #s(yas--exit 175 nil) 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 175 nil) 5 nil nil nil nil)) (167 . 176) (#("margin: $0;" 0 7 (part-side css face web-mode-css-property-name-face) 7 8 (part-side css) 8 10 (part-side css face web-mode-css-variable-face) 10 11 (part-side css)) . 167) (167 . 178) (#("m" 0 1 (part-side css)) . 167) (167 . 168) (#("margin" 0 6 (part-side css)) . -167) (167 . 173) (#("marg" 0 4 (part-side css)) . -167) (undo-tree-id1156 . -4) (undo-tree-id1157 . -4) 171) nil (25796 60931 813463 971000) 0 nil])
([nil nil ((175 . 176)) nil (25796 60931 813459 44000) 0 nil])
([nil nil ((176 . 179)) nil (25796 60931 813457 880000) 0 nil])
([nil nil ((177 . 181) (#("a" 0 1 (part-side css)) . 177) (177 . 178) (#("auto" 0 4 (part-side css)) . -177) (177 . 181) (#("au" 0 2 (part-side css)) . -177) (undo-tree-id1068 . -2) (undo-tree-id1069 . -2) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -2) (undo-tree-id1088 . -2) (undo-tree-id1089 . -2) (undo-tree-id1090 . -2) (undo-tree-id1091 . -2) (undo-tree-id1092 . -2) (undo-tree-id1093 . -2) (undo-tree-id1094 . -2) (undo-tree-id1095 . -1) (undo-tree-id1096 . -2) (undo-tree-id1097 . -2) (undo-tree-id1098 . -2) (undo-tree-id1099 . -2) (undo-tree-id1100 . -2) (undo-tree-id1101 . -2) (undo-tree-id1102 . -2) (undo-tree-id1103 . -2) (undo-tree-id1104 . -2) (undo-tree-id1105 . -2) (undo-tree-id1106 . -2) (undo-tree-id1107 . -2) (undo-tree-id1108 . -2) (undo-tree-id1109 . -2) (undo-tree-id1110 . -2) (undo-tree-id1111 . -2) (undo-tree-id1112 . -2) (undo-tree-id1113 . -2) (undo-tree-id1114 . -2) (undo-tree-id1115 . -2) (undo-tree-id1116 . -2) (undo-tree-id1117 . -2) (undo-tree-id1118 . -2) (undo-tree-id1119 . -2) (undo-tree-id1120 . -2) (undo-tree-id1121 . -2) (undo-tree-id1122 . -2) (undo-tree-id1123 . -2) (undo-tree-id1124 . -2) (undo-tree-id1125 . -2) (undo-tree-id1126 . -2) (undo-tree-id1127 . -2) (undo-tree-id1128 . -2) (undo-tree-id1129 . -2) (undo-tree-id1130 . -2) (undo-tree-id1131 . -2) (undo-tree-id1132 . -2) (undo-tree-id1133 . -2) (undo-tree-id1134 . -2) (undo-tree-id1135 . -2) (undo-tree-id1136 . -2) (undo-tree-id1137 . -2) (undo-tree-id1138 . -2) (undo-tree-id1139 . -2) (undo-tree-id1140 . -2) (undo-tree-id1141 . -2) (undo-tree-id1142 . -2) (undo-tree-id1143 . -2) (undo-tree-id1144 . -2) (undo-tree-id1145 . -2) (undo-tree-id1146 . -2) (undo-tree-id1147 . -2) (undo-tree-id1148 . -2) (undo-tree-id1149 . -2) (undo-tree-id1150 . -2) (undo-tree-id1151 . -2) (undo-tree-id1152 . -2) (undo-tree-id1153 . -2) (undo-tree-id1154 . -2) (undo-tree-id1155 . -2) 179) nil (25796 60931 813450 642000) 0 nil])
([nil nil ((182 . 183)) nil (25796 60931 813370 171000) 0 nil])
([nil nil ((#("  
" 0 2 (part-side css) 2 3 (part-side css)) . -183) (undo-tree-id968 . -2) (undo-tree-id969 . -2) (undo-tree-id970 . -2) (undo-tree-id971 . -2) (undo-tree-id972 . -2) (undo-tree-id973 . -2) (undo-tree-id974 . -2) (undo-tree-id975 . -2) (undo-tree-id976 . -2) (undo-tree-id977 . -2) (undo-tree-id978 . -2) (undo-tree-id979 . -2) (undo-tree-id980 . -2) (undo-tree-id981 . -2) (undo-tree-id982 . -2) (undo-tree-id983 . -2) (undo-tree-id984 . -2) (undo-tree-id985 . -2) (undo-tree-id986 . -2) (undo-tree-id987 . -2) (undo-tree-id988 . -2) (undo-tree-id989 . -2) (undo-tree-id990 . -2) (undo-tree-id991 . -2) (undo-tree-id992 . -2) (undo-tree-id993 . -2) (undo-tree-id994 . -2) (undo-tree-id995 . -2) (undo-tree-id996 . -2) (undo-tree-id997 . -2) (undo-tree-id998 . -2) (undo-tree-id999 . -2) (undo-tree-id1000 . -2) (undo-tree-id1001 . -2) (undo-tree-id1002 . -2) (undo-tree-id1003 . -2) (undo-tree-id1004 . -2) (undo-tree-id1005 . -2) (undo-tree-id1006 . -2) (undo-tree-id1007 . -2) (undo-tree-id1008 . -2) (undo-tree-id1009 . -2) (undo-tree-id1010 . -2) (undo-tree-id1011 . -2) (undo-tree-id1012 . -2) (undo-tree-id1013 . -2) (undo-tree-id1014 . -2) (undo-tree-id1015 . -2) (undo-tree-id1016 . -2) (undo-tree-id1017 . -2) (undo-tree-id1018 . -2) (undo-tree-id1019 . -2) (undo-tree-id1020 . -2) (undo-tree-id1021 . -2) (undo-tree-id1022 . -2) (undo-tree-id1023 . -2) (undo-tree-id1024 . -2) (undo-tree-id1025 . -2) (undo-tree-id1026 . -2) (undo-tree-id1027 . -2) (undo-tree-id1028 . -2) (undo-tree-id1029 . -2) (undo-tree-id1030 . -2) (undo-tree-id1031 . -2) (undo-tree-id1032 . -2) (undo-tree-id1033 . -2) (undo-tree-id1034 . -2) (undo-tree-id1035 . -2) (undo-tree-id1036 . -2) (undo-tree-id1037 . -2) (undo-tree-id1038 . -2) (undo-tree-id1039 . -2) (undo-tree-id1040 . -2) (undo-tree-id1041 . -2) (undo-tree-id1042 . -2) (undo-tree-id1043 . -2) (undo-tree-id1044 . -2) (undo-tree-id1045 . -2) (undo-tree-id1046 . -2) (undo-tree-id1047 . -2) (undo-tree-id1048 . -2) (undo-tree-id1049 . -2) (undo-tree-id1050 . -2) (undo-tree-id1051 . -2) (undo-tree-id1052 . -2) (undo-tree-id1053 . -2) (undo-tree-id1054 . -2) (undo-tree-id1055 . -2) (undo-tree-id1056 . -2) (undo-tree-id1057 . -2) (undo-tree-id1058 . -2) (undo-tree-id1059 . -2) (undo-tree-id1060 . -2) (undo-tree-id1061 . -2) (undo-tree-id1062 . -2) (undo-tree-id1063 . -2) (undo-tree-id1064 . -2) (undo-tree-id1065 . -2) (undo-tree-id1066 . -2) (undo-tree-id1067 . -2) 185) nil (25796 60931 813358 199000) 0 nil])
([nil nil ((182 . 185) (t 25796 60931 825204 176000)) nil (25796 60954 705676 842000) 0 nil])
([nil nil ((185 . 190)) nil (25796 60954 705675 601000) 0 nil])
([nil nil ((#("r" 0 1 (part-side css)) . -189) (undo-tree-id1240 . -1) 190) nil (25796 60954 705674 308000) 0 nil])
([nil nil ((189 . 190)) nil (25796 60954 705672 215000) 0 nil])
([nil nil ((#("m" 0 1 (part-side css)) . -187) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (#("t" 0 1 (part-side css)) . -188) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (#("e" 0 1 (part-side css)) . -189) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) 190) nil (25796 60954 705670 390000) 0 nil])
([nil nil ((187 . 191)) nil (25796 60954 705662 710000) 0 nil])
([nil nil ((#("e" 0 1 (part-side css)) . -186) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (#("n" 0 1 (part-side css)) . -187) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (#("t" 0 1 (part-side css)) . -188) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (#("e" 0 1 (part-side css)) . -189) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (#("r" 0 1 (part-side css)) . -190) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) 191) nil (25796 60954 705660 456000) 0 nil])
([nil nil ((186 . 191)) nil (25796 60954 705649 906000) 0 nil])
([nil nil ((#("
" 0 1 (part-side css)) . 191) (undo-tree-id1222 . 1) (undo-tree-id1223 . -1)) nil (25796 60954 705648 458000) 0 nil])
([nil nil ((#("}" 0 1 (part-side css face (rainbow-delimiters-depth-1-face))) . 191) (undo-tree-id1219 . 1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1)) nil (25796 60954 706604 319000) 0 nil])
([nil nil ((#("c" 0 1 (part-side css)) . -185) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (#("e" 0 1 (part-side css)) . -186) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (#("n" 0 1 (part-side css)) . -187) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (#("t" 0 1 (part-side css)) . -188) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (#("e" 0 1 (part-side css)) . -189) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (#("r" 0 1 (part-side css)) . -190) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) 191) nil (25796 60974 729937 907000) 0 nil] [nil nil ((185 . 202) (#("center" 0 6 (part-side css)) . -185) (undo-tree-id1168 . -6) (undo-tree-id1169 . -6) (undo-tree-id1170 . -6) (undo-tree-id1171 . -6) (undo-tree-id1172 . -6) (undo-tree-id1173 . -6) (undo-tree-id1174 . -6) (undo-tree-id1175 . -6) (undo-tree-id1176 . -6) (undo-tree-id1177 . -6) (undo-tree-id1178 . -6) (undo-tree-id1179 . -6) (undo-tree-id1180 . -6) (undo-tree-id1181 . -6) (undo-tree-id1182 . -6) (undo-tree-id1183 . -6) (undo-tree-id1184 . -6) (undo-tree-id1185 . -6) (undo-tree-id1186 . -6) (undo-tree-id1187 . -6) (undo-tree-id1188 . -6) (undo-tree-id1189 . -6) (undo-tree-id1190 . -6) (undo-tree-id1191 . -6) (undo-tree-id1192 . -6) (undo-tree-id1193 . -6) (undo-tree-id1194 . -6) (undo-tree-id1195 . -6) (undo-tree-id1196 . -6) (undo-tree-id1197 . -6) (undo-tree-id1198 . -6) (undo-tree-id1199 . -6) (undo-tree-id1200 . -6) (undo-tree-id1201 . -6) (undo-tree-id1202 . -6) (undo-tree-id1203 . -6) (undo-tree-id1204 . -6) (undo-tree-id1205 . -6) (undo-tree-id1206 . -6) (undo-tree-id1207 . -6) (undo-tree-id1208 . -6) (undo-tree-id1209 . -6) (undo-tree-id1210 . -6) (undo-tree-id1211 . -6) (undo-tree-id1212 . -6) (undo-tree-id1213 . -6) (undo-tree-id1214 . -6) (undo-tree-id1215 . -6) (undo-tree-id1216 . -6) (undo-tree-id1217 . -6) (undo-tree-id1218 . -6) 191) ((185 . 191) (#("<center></center>" 0 17 (part-side css)) . 185) (undo-tree-id1241 . -8) (undo-tree-id1242 . -8) (undo-tree-id1243 . -1) (undo-tree-id1244 . -8)) (25796 60954 705633 366000) 0 nil])
([nil nil ((184 . 186) (#("  " 0 2 (part-side css)) . 183) (undo-tree-id1246 . -2) (undo-tree-id1247 . -2) (185 . 186)) nil (25796 60974 729924 51000) 0 nil])
nil
([nil nil ((#("  " 0 2 (part-side css)) . -184) (undo-tree-id1245 . -2) (186 . 187)) nil (25796 60974 729919 801000) 0 nil])
([nil nil ((183 . 185)) nil (25796 60974 729909 799000) 0 nil])
([nil nil ((#("  " 0 2 (part-side css)) . -185) (nil rear-nonsticky nil 239 . 240) (nil part-side css 239 . 240) (nil part-side css 234 . 239) (nil face (:background "#000000" :foreground "white") 234 . 239) (nil part-side css 223 . 234) (nil part-side css 216 . 223) (nil face web-mode-css-property-name-face 216 . 223) (nil part-side css 195 . 216) (nil part-side css 187 . 195) (nil face web-mode-css-property-name-face 187 . 195) (nil part-side css 185 . 187) (185 . 240)) nil (25796 60974 729903 203000) 0 nil])
([nil nil ((238 . 241) (t 25796 60974 744387 219000)) nil (25796 61157 75063 792000) 0 nil])
([nil nil ((241 . 244)) nil (25796 61157 75062 275000) 0 nil])
([nil nil ((#("t" 0 1 (part-side css)) . -241) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (#("e" 0 1 (part-side css)) . -242) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (#("x" 0 1 (part-side css)) . -243) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) 244) nil (25796 61157 75060 301000) 0 nil])
([nil nil ((241 . 245)) nil (25796 61157 75053 11000) 0 nil])
([nil nil ((apply yas--snippet-revive 241 260 #s(yas--snippet nil nil #s(yas--exit 259 nil) 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 259 nil) 6 nil nil nil nil)) (241 . 260) (#("background-color: $0;" 0 17 (part-side css face web-mode-css-property-name-face) 17 18 (part-side css) 18 20 (part-side css face web-mode-css-variable-face) 20 21 (part-side css)) . 241) (241 . 262) (#("b" 0 1 (part-side css)) . 241) (241 . 242) (#("background-color" 0 16 (part-side css)) . -241) (241 . 257) (#("back" 0 4 (part-side css)) . -241) (undo-tree-id1363 . -4) (undo-tree-id1364 . -4) 245) nil (25796 61157 75050 540000) 0 nil])
([nil nil ((nil rear-nonsticky nil 265 . 266) (nil part-side css 259 . 266) (nil face ((:foreground "white") (:background "#552A51")) 259 . 266) (259 . 266)) nil (25796 61157 75042 893000) 0 nil])
([nil nil ((239 . 268) (#("  background-color: #552A51;
" 0 2 (part-side css) 2 19 (part-side css face web-mode-css-property-name-face) 19 20 (part-side css) 20 26 (part-side css face ((:foreground "white") (:background "#552A51"))) 26 27 (rear-nonsticky t part-side css face ((:foreground "white") (:background "#552A51"))) 27 28 (part-side css) 28 29 (part-side css)) . -239) (undo-tree-id1260 . -20) (undo-tree-id1261 . -28) (undo-tree-id1262 . -27) (undo-tree-id1263 . -2) (undo-tree-id1264 . 2) (undo-tree-id1265 . -20) (undo-tree-id1266 . -27) (undo-tree-id1267 . -20) (undo-tree-id1268 . -20) (undo-tree-id1269 . -27) (undo-tree-id1270 . -27) (undo-tree-id1271 . -27) (undo-tree-id1272 . -27) (undo-tree-id1273 . -27) (undo-tree-id1274 . -27) (undo-tree-id1275 . -27) (undo-tree-id1276 . -27) (undo-tree-id1277 . -27) (undo-tree-id1278 . -27) (undo-tree-id1279 . -27) (undo-tree-id1280 . -27) (undo-tree-id1281 . -27) (undo-tree-id1282 . -27) (undo-tree-id1283 . -27) (undo-tree-id1284 . -27) (undo-tree-id1285 . -27) (undo-tree-id1286 . -27) (undo-tree-id1287 . -27) (undo-tree-id1288 . -27) (undo-tree-id1289 . -27) (undo-tree-id1290 . -27) (undo-tree-id1291 . -27) (undo-tree-id1292 . -27) (undo-tree-id1293 . -27) (undo-tree-id1294 . -28) (undo-tree-id1295 . -27) (undo-tree-id1296 . -28) (undo-tree-id1297 . -28) (undo-tree-id1298 . -28) (undo-tree-id1299 . -28) (undo-tree-id1300 . -28) (undo-tree-id1301 . -28) (undo-tree-id1302 . -28) (undo-tree-id1303 . -28) (undo-tree-id1304 . -28) (undo-tree-id1305 . -28) (undo-tree-id1306 . -28) (undo-tree-id1307 . -28) (undo-tree-id1308 . -28) (undo-tree-id1309 . -28) (undo-tree-id1310 . -28) (undo-tree-id1311 . -28) (undo-tree-id1312 . -28) (undo-tree-id1313 . -28) (undo-tree-id1314 . -28) (undo-tree-id1315 . -28) (undo-tree-id1316 . -28) (undo-tree-id1317 . -28) (undo-tree-id1318 . -28) (undo-tree-id1319 . -28) (undo-tree-id1320 . -28) (undo-tree-id1321 . -28) (undo-tree-id1322 . -28) (undo-tree-id1323 . -28) (undo-tree-id1324 . -28) (undo-tree-id1325 . -28) (undo-tree-id1326 . -28) (undo-tree-id1327 . -28) (undo-tree-id1328 . -28) (undo-tree-id1329 . -28) (undo-tree-id1330 . -28) (undo-tree-id1331 . -28) (undo-tree-id1332 . -28) (undo-tree-id1333 . -28) (undo-tree-id1334 . -28) (undo-tree-id1335 . -28) (undo-tree-id1336 . -28) (undo-tree-id1337 . -28) (undo-tree-id1338 . -28) (undo-tree-id1339 . -28) (undo-tree-id1340 . -28) (undo-tree-id1341 . -28) (undo-tree-id1342 . -28) (undo-tree-id1343 . -28) (undo-tree-id1344 . -28) (undo-tree-id1345 . -28) (undo-tree-id1346 . -28) (undo-tree-id1347 . -28) (undo-tree-id1348 . -28) (undo-tree-id1349 . -28) (undo-tree-id1350 . -28) (undo-tree-id1351 . -28) (undo-tree-id1352 . -28) (undo-tree-id1353 . -28) (undo-tree-id1354 . -28) (undo-tree-id1355 . -28) (undo-tree-id1356 . -28) (undo-tree-id1357 . -28) (undo-tree-id1358 . -28) (undo-tree-id1359 . -28) (undo-tree-id1360 . -28) (undo-tree-id1361 . -28) (undo-tree-id1362 . -28) 267) nil (25796 61157 75030 492000) 0 nil])
([nil nil ((#("
" 0 1 (part-side css)) . 239) (#("  background-color: #552a51;" 0 2 (part-side css) 2 19 (part-side css face web-mode-css-property-name-face) 19 20 (part-side css) 20 27 (part-side css face ((:foreground "white") (:background "#552a51"))) 27 28 (part-side css)) . -239) (undo-tree-id1830 . -28) (undo-tree-id1831 . -28) 267 (t 25796 61157 87727 804000)) nil (25796 61288 953284 131000) 0 nil])
([nil nil ((#("  " 0 2 (part-side css)) . 239) (239 . 241) (239 . 240)) nil (25796 61288 953279 945000) 0 nil])
([nil nil ((239 . 241)) nil (25796 61288 953278 264000) 0 nil])
([nil nil ((268 . 270) (#(" " 0 1 (part-side css)) . -241) (nil rear-nonsticky nil 349 . 350) (nil part-side css 348 . 350) (nil part-side css 347 . 348) (nil face (rainbow-delimiters-depth-2-face) 347 . 348) (nil part-side css 342 . 347) (nil part-side css 341 . 342) (nil face (rainbow-delimiters-depth-3-face (:background "#11001C" :foreground "white")) 341 . 342) (nil part-side css 332 . 341) (nil face (:background "#11001C" :foreground "white") 332 . 341) (nil part-side css 331 . 332) (nil face (rainbow-delimiters-depth-3-face (:background "#11001C" :foreground "white")) 331 . 332) (nil part-side css 327 . 331) (nil face (:background "#11001C" :foreground "white") 327 . 331) (nil part-side css 321 . 327) (nil part-side css 320 . 321) (nil face (rainbow-delimiters-depth-3-face (:background "#552A51" :foreground "white")) 320 . 321) (nil part-side css 310 . 320) (nil face (:background "#552A51" :foreground "white") 310 . 320) (nil part-side css 309 . 310) (nil face (rainbow-delimiters-depth-3-face (:background "#552A51" :foreground "white")) 309 . 310) (nil part-side css 305 . 309) (nil face (:background "#552A51" :foreground "white") 305 . 309) (nil part-side css 297 . 305) (nil part-side css 296 . 297) (nil face (rainbow-delimiters-depth-2-face) 296 . 297) (nil part-side css 281 . 296) (nil face web-mode-css-function-face 281 . 296) (nil part-side css 280 . 281) (nil part-side css 269 . 280) (nil face web-mode-css-property-name-face 269 . 280) (nil part-side css 267 . 269) (nil part-side css 266 . 267) (nil face (rainbow-delimiters-depth-2-face (:background "#552A51" :foreground "white")) 266 . 267) (nil part-side css 258 . 266) (nil face (:background "#552A51" :foreground "white") 258 . 266) (nil part-side css 257 . 258) (nil face (rainbow-delimiters-depth-2-face (:background "#552A51" :foreground "white")) 257 . 258) (nil part-side css 254 . 257) (nil face (:background "#552A51" :foreground "white") 254 . 257) (nil part-side css 253 . 254) (nil part-side css 242 . 253) (nil face web-mode-css-property-name-face 242 . 253) (nil part-side css 241 . 242) (241 . 350)) nil (25796 61288 953273 698000) 0 nil])
([nil nil ((239 . 375) (#("  background: rgb(85,42,81);
  background: radial-gradient(circle, rgba(85,42,81,1) 42%, rgba(17,0,28,1) 100%); 
" 0 2 (part-side css) 2 13 (part-side css face web-mode-css-property-name-face) 13 14 (part-side css) 14 17 (part-side css face (:background "#552A51" :foreground "white")) 17 18 (part-side css face (rainbow-delimiters-depth-2-face (:background "#552A51" :foreground "white"))) 18 26 (part-side css face (:background "#552A51" :foreground "white")) 26 27 (part-side css face (rainbow-delimiters-depth-2-face (:background "#552A51" :foreground "white"))) 27 31 (part-side css) 31 42 (part-side css face web-mode-css-property-name-face) 42 43 (part-side css) 43 58 (part-side css face web-mode-css-function-face) 58 59 (part-side css face (rainbow-delimiters-depth-2-face)) 59 67 (part-side css) 67 71 (part-side css face (:background "#552A51" :foreground "white")) 71 72 (part-side css face (rainbow-delimiters-depth-3-face (:background "#552A51" :foreground "white"))) 72 82 (part-side css face (:background "#552A51" :foreground "white")) 82 83 (part-side css face (rainbow-delimiters-depth-3-face (:background "#552A51" :foreground "white"))) 83 89 (part-side css) 89 93 (part-side css face (:background "#11001C" :foreground "white")) 93 94 (part-side css face (rainbow-delimiters-depth-3-face (:background "#11001C" :foreground "white"))) 94 103 (part-side css face (:background "#11001C" :foreground "white")) 103 104 (part-side css face (rainbow-delimiters-depth-3-face (:background "#11001C" :foreground "white"))) 104 109 (part-side css) 109 110 (part-side css face (rainbow-delimiters-depth-2-face)) 110 111 (part-side css) 111 112 (rear-nonsticky t part-side css) 112 113 (part-side css)) . -239) (undo-tree-id1371 . -2) (undo-tree-id1372 . -113) (undo-tree-id1373 . -113) (undo-tree-id1374 . -2) (undo-tree-id1375 . -2) (undo-tree-id1376 . -2) (undo-tree-id1377 . -2) (undo-tree-id1378 . -2) (undo-tree-id1379 . -2) (undo-tree-id1380 . -2) (undo-tree-id1381 . -2) (undo-tree-id1382 . -2) (undo-tree-id1383 . -2) (undo-tree-id1384 . -2) (undo-tree-id1385 . -2) (undo-tree-id1386 . -2) (undo-tree-id1387 . -2) (undo-tree-id1388 . -2) (undo-tree-id1389 . -2) (undo-tree-id1390 . -2) (undo-tree-id1391 . -2) (undo-tree-id1392 . -2) (undo-tree-id1393 . -2) (undo-tree-id1394 . -2) (undo-tree-id1395 . -2) (undo-tree-id1396 . -2) (undo-tree-id1397 . -2) (undo-tree-id1398 . -2) (undo-tree-id1399 . -2) (undo-tree-id1400 . -2) (undo-tree-id1401 . -2) (undo-tree-id1402 . -2) (undo-tree-id1403 . -2) (undo-tree-id1404 . -2) (undo-tree-id1405 . -2) (undo-tree-id1406 . -2) (undo-tree-id1407 . -2) (undo-tree-id1408 . -2) (undo-tree-id1409 . -2) (undo-tree-id1410 . -2) (undo-tree-id1411 . -2) (undo-tree-id1412 . -2) (undo-tree-id1413 . -2) (undo-tree-id1414 . -2) (undo-tree-id1415 . -2) (undo-tree-id1416 . -2) (undo-tree-id1417 . -2) (undo-tree-id1418 . -2) (undo-tree-id1419 . -2) (undo-tree-id1420 . -2) (undo-tree-id1421 . -2) (undo-tree-id1422 . -2) (undo-tree-id1423 . -2) (undo-tree-id1424 . -2) (undo-tree-id1425 . -2) (undo-tree-id1426 . -2) (undo-tree-id1427 . -2) (undo-tree-id1428 . -2) (undo-tree-id1429 . -2) (undo-tree-id1430 . -2) (undo-tree-id1431 . -2) (undo-tree-id1432 . -2) (undo-tree-id1433 . -2) (undo-tree-id1434 . -2) (undo-tree-id1435 . -2) (undo-tree-id1436 . -2) (undo-tree-id1437 . -2) (undo-tree-id1438 . -2) (undo-tree-id1439 . -2) (undo-tree-id1440 . -2) (undo-tree-id1441 . -2) (undo-tree-id1442 . -2) (undo-tree-id1443 . -2) (undo-tree-id1444 . -2) (undo-tree-id1445 . -2) (undo-tree-id1446 . -2) (undo-tree-id1447 . -2) (undo-tree-id1448 . -2) (undo-tree-id1449 . -2) (undo-tree-id1450 . -2) (undo-tree-id1451 . -2) (undo-tree-id1452 . -2) (undo-tree-id1453 . -2) (undo-tree-id1454 . -2) (undo-tree-id1455 . -2) (undo-tree-id1456 . -2) (undo-tree-id1457 . -2) (undo-tree-id1458 . -2) (undo-tree-id1459 . -2) (undo-tree-id1460 . -2) (undo-tree-id1461 . -2) (undo-tree-id1462 . -2) (undo-tree-id1463 . -2) (undo-tree-id1464 . -2) (undo-tree-id1465 . -2) (undo-tree-id1466 . -2) (undo-tree-id1467 . -2) (undo-tree-id1468 . -2) (undo-tree-id1469 . -2) (undo-tree-id1470 . -2) (undo-tree-id1471 . -2) (undo-tree-id1472 . -2) (undo-tree-id1473 . -2) (undo-tree-id1474 . -2) (undo-tree-id1475 . -2) (undo-tree-id1476 . -2) (undo-tree-id1477 . -2) (undo-tree-id1478 . -2) (undo-tree-id1479 . -2) (undo-tree-id1480 . -2) (undo-tree-id1481 . -2) (undo-tree-id1482 . -2) (undo-tree-id1483 . -2) (undo-tree-id1484 . -2) (undo-tree-id1485 . -2) (undo-tree-id1486 . -2) (undo-tree-id1487 . -2) (undo-tree-id1488 . -2) (undo-tree-id1489 . -2) (undo-tree-id1490 . -2) (undo-tree-id1491 . -2) (undo-tree-id1492 . -2) (undo-tree-id1493 . -2) (undo-tree-id1494 . -2) (undo-tree-id1495 . -2) (undo-tree-id1496 . -2) (undo-tree-id1497 . -2) (undo-tree-id1498 . -2) (undo-tree-id1499 . -2) (undo-tree-id1500 . -2) (undo-tree-id1501 . -2) (undo-tree-id1502 . -2) (undo-tree-id1503 . -2) (undo-tree-id1504 . -2) (undo-tree-id1505 . -2) (undo-tree-id1506 . -2) (undo-tree-id1507 . -2) (undo-tree-id1508 . -2) (undo-tree-id1509 . -2) (undo-tree-id1510 . -2) (undo-tree-id1511 . -2) (undo-tree-id1512 . -2) (undo-tree-id1513 . -2) (undo-tree-id1514 . -2) (undo-tree-id1515 . -2) (undo-tree-id1516 . -2) (undo-tree-id1517 . -2) (undo-tree-id1518 . -2) (undo-tree-id1519 . -2) (undo-tree-id1520 . -2) (undo-tree-id1521 . -2) (undo-tree-id1522 . -2) (undo-tree-id1523 . -2) (undo-tree-id1524 . -2) (undo-tree-id1525 . -2) (undo-tree-id1526 . -2) (undo-tree-id1527 . -2) (undo-tree-id1528 . -2) (undo-tree-id1529 . -2) (undo-tree-id1530 . -2) (undo-tree-id1531 . -2) (undo-tree-id1532 . -2) (undo-tree-id1533 . -2) (undo-tree-id1534 . -2) (undo-tree-id1535 . -2) (undo-tree-id1536 . -2) (undo-tree-id1537 . -2) (undo-tree-id1538 . -2) (undo-tree-id1539 . -2) (undo-tree-id1540 . -2) (undo-tree-id1541 . -2) (undo-tree-id1542 . -2) (undo-tree-id1543 . -2) (undo-tree-id1544 . -2) (undo-tree-id1545 . -2) (undo-tree-id1546 . -2) (undo-tree-id1547 . -2) (undo-tree-id1548 . -2) (undo-tree-id1549 . -2) (undo-tree-id1550 . -2) (undo-tree-id1551 . -2) (undo-tree-id1552 . -2) (undo-tree-id1553 . -2) (undo-tree-id1554 . -2) (undo-tree-id1555 . -2) (undo-tree-id1556 . -2) (undo-tree-id1557 . -2) (undo-tree-id1558 . -2) (undo-tree-id1559 . -2) (undo-tree-id1560 . -2) (undo-tree-id1561 . -2) (undo-tree-id1562 . -2) (undo-tree-id1563 . -2) (undo-tree-id1564 . -2) (undo-tree-id1565 . -2) (undo-tree-id1566 . -2) (undo-tree-id1567 . -2) (undo-tree-id1568 . -2) (undo-tree-id1569 . -2) (undo-tree-id1570 . -2) (undo-tree-id1571 . -2) (undo-tree-id1572 . -2) (undo-tree-id1573 . -2) (undo-tree-id1574 . -2) (undo-tree-id1575 . -2) (undo-tree-id1576 . -2) (undo-tree-id1577 . -2) (undo-tree-id1578 . -2) (undo-tree-id1579 . -2) (undo-tree-id1580 . -2) (undo-tree-id1581 . -28) (undo-tree-id1582 . -2) (undo-tree-id1583 . -2) (undo-tree-id1584 . -2) (undo-tree-id1585 . -2) (undo-tree-id1586 . -2) (undo-tree-id1587 . -2) (undo-tree-id1588 . -2) (undo-tree-id1589 . -2) (undo-tree-id1590 . -2) (undo-tree-id1591 . -2) (undo-tree-id1592 . -2) (undo-tree-id1593 . -2) (undo-tree-id1594 . -2) (undo-tree-id1595 . -2) (undo-tree-id1596 . -2) (undo-tree-id1597 . -2) (undo-tree-id1598 . -2) (undo-tree-id1599 . -2) (undo-tree-id1600 . -2) (undo-tree-id1601 . -2) (undo-tree-id1602 . -2) (undo-tree-id1603 . -2) (undo-tree-id1604 . -2) (undo-tree-id1605 . -2) (undo-tree-id1606 . -2) (undo-tree-id1607 . -2) (undo-tree-id1608 . -2) (undo-tree-id1609 . -2) (undo-tree-id1610 . -2) (undo-tree-id1611 . -2) (undo-tree-id1612 . -2) (undo-tree-id1613 . -2) (undo-tree-id1614 . -2) (undo-tree-id1615 . -2) (undo-tree-id1616 . -2) (undo-tree-id1617 . -2) (undo-tree-id1618 . -2) (undo-tree-id1619 . -2) (undo-tree-id1620 . -2) (undo-tree-id1621 . -2) (undo-tree-id1622 . -2) (undo-tree-id1623 . -2) (undo-tree-id1624 . -2) (undo-tree-id1625 . -2) (undo-tree-id1626 . -2) (undo-tree-id1627 . -2) (undo-tree-id1628 . -2) (undo-tree-id1629 . -2) (undo-tree-id1630 . -2) (undo-tree-id1631 . -2) (undo-tree-id1632 . -2) (undo-tree-id1633 . -2) (undo-tree-id1634 . -2) (undo-tree-id1635 . -2) (undo-tree-id1636 . -2) (undo-tree-id1637 . -2) (undo-tree-id1638 . -2) (undo-tree-id1639 . -2) (undo-tree-id1640 . -2) (undo-tree-id1641 . -2) (undo-tree-id1642 . -2) (undo-tree-id1643 . -2) (undo-tree-id1644 . -2) (undo-tree-id1645 . -2) (undo-tree-id1646 . -2) (undo-tree-id1647 . -2) (undo-tree-id1648 . -2) (undo-tree-id1649 . -112) (undo-tree-id1650 . -2) (undo-tree-id1651 . -112) (undo-tree-id1652 . -112) (undo-tree-id1653 . -112) (undo-tree-id1654 . -112) (undo-tree-id1655 . -112) (undo-tree-id1656 . -112) (undo-tree-id1657 . -112) (undo-tree-id1658 . -112) (undo-tree-id1659 . -112) (undo-tree-id1660 . -112) (undo-tree-id1661 . -112) (undo-tree-id1662 . -112) (undo-tree-id1663 . -112) (undo-tree-id1664 . -112) (undo-tree-id1665 . -112) (undo-tree-id1666 . -112) (undo-tree-id1667 . -112) (undo-tree-id1668 . -112) (undo-tree-id1669 . -112) (undo-tree-id1670 . -112) (undo-tree-id1671 . -112) (undo-tree-id1672 . -112) (undo-tree-id1673 . -112) (undo-tree-id1674 . -112) (undo-tree-id1675 . -112) (undo-tree-id1676 . -112) (undo-tree-id1677 . -112) (undo-tree-id1678 . -112) (undo-tree-id1679 . -112) (undo-tree-id1680 . -112) (undo-tree-id1681 . -112) (undo-tree-id1682 . -112) (undo-tree-id1683 . -112) (undo-tree-id1684 . -112) (undo-tree-id1685 . -112) (undo-tree-id1686 . -112) (undo-tree-id1687 . -112) (undo-tree-id1688 . -112) (undo-tree-id1689 . -112) (undo-tree-id1690 . -112) (undo-tree-id1691 . -112) (undo-tree-id1692 . -112) (undo-tree-id1693 . -112) (undo-tree-id1694 . -112) (undo-tree-id1695 . -112) (undo-tree-id1696 . -112) (undo-tree-id1697 . -112) (undo-tree-id1698 . -112) (undo-tree-id1699 . -112) (undo-tree-id1700 . -112) (undo-tree-id1701 . -112) (undo-tree-id1702 . -112) (undo-tree-id1703 . -112) (undo-tree-id1704 . -112) (undo-tree-id1705 . -112) (undo-tree-id1706 . -112) (undo-tree-id1707 . -112) (undo-tree-id1708 . -112) (undo-tree-id1709 . -112) (undo-tree-id1710 . -112) (undo-tree-id1711 . -112) (undo-tree-id1712 . -112) (undo-tree-id1713 . -112) (undo-tree-id1714 . -112) (undo-tree-id1715 . -112) (undo-tree-id1716 . -112) (undo-tree-id1717 . -14) (undo-tree-id1718 . -27) (undo-tree-id1719 . -67) (undo-tree-id1720 . -83) (undo-tree-id1721 . -89) (undo-tree-id1722 . -104) (undo-tree-id1723 . -112) (undo-tree-id1724 . -112) (undo-tree-id1725 . -112) (undo-tree-id1726 . -112) (undo-tree-id1727 . -112) (undo-tree-id1728 . -112) (undo-tree-id1729 . -112) (undo-tree-id1730 . -112) (undo-tree-id1731 . -112) (undo-tree-id1732 . -112) (undo-tree-id1733 . -112) (undo-tree-id1734 . -112) (undo-tree-id1735 . -112) (undo-tree-id1736 . -112) (undo-tree-id1737 . -112) (undo-tree-id1738 . -112) (undo-tree-id1739 . -112) (undo-tree-id1740 . -112) (undo-tree-id1741 . -112) (undo-tree-id1742 . -112) (undo-tree-id1743 . -112) (undo-tree-id1744 . -112) (undo-tree-id1745 . -112) (undo-tree-id1746 . -112) (undo-tree-id1747 . -112) (undo-tree-id1748 . -112) (undo-tree-id1749 . -112) (undo-tree-id1750 . -112) (undo-tree-id1751 . -112) (undo-tree-id1752 . -112) (undo-tree-id1753 . -112) (undo-tree-id1754 . -112) (undo-tree-id1755 . -112) (undo-tree-id1756 . -112) (undo-tree-id1757 . -112) (undo-tree-id1758 . -112) (undo-tree-id1759 . -112) (undo-tree-id1760 . -112) (undo-tree-id1761 . -28) (undo-tree-id1762 . -112) (undo-tree-id1763 . -28) (undo-tree-id1764 . -28) (undo-tree-id1765 . -28) (undo-tree-id1766 . -28) (undo-tree-id1767 . -28) (undo-tree-id1768 . -28) (undo-tree-id1769 . -28) (undo-tree-id1770 . -28) (undo-tree-id1771 . -28) (undo-tree-id1772 . -28) (undo-tree-id1773 . -28) (undo-tree-id1774 . -28) (undo-tree-id1775 . -28) (undo-tree-id1776 . -28) (undo-tree-id1777 . -28) (undo-tree-id1778 . -28) (undo-tree-id1779 . -28) (undo-tree-id1780 . -28) (undo-tree-id1781 . -28) (undo-tree-id1782 . -28) (undo-tree-id1783 . -28) (undo-tree-id1784 . -28) (undo-tree-id1785 . -28) (undo-tree-id1786 . -28) (undo-tree-id1787 . -28) (undo-tree-id1788 . -28) (undo-tree-id1789 . -28) (undo-tree-id1790 . -28) (undo-tree-id1791 . -28) (undo-tree-id1792 . -28) (undo-tree-id1793 . -28) (undo-tree-id1794 . -28) (undo-tree-id1795 . -28) (undo-tree-id1796 . -28) (undo-tree-id1797 . -28) (undo-tree-id1798 . -28) (undo-tree-id1799 . -28) (undo-tree-id1800 . -28) (undo-tree-id1801 . -28) (undo-tree-id1802 . -28) (undo-tree-id1803 . -28) (undo-tree-id1804 . -28) (undo-tree-id1805 . -28) (undo-tree-id1806 . -28) (undo-tree-id1807 . -28) (undo-tree-id1808 . -28) (undo-tree-id1809 . -28) (undo-tree-id1810 . -28) (undo-tree-id1811 . -28) (undo-tree-id1812 . -28) (undo-tree-id1813 . -28) (undo-tree-id1814 . -28) (undo-tree-id1815 . -28) (undo-tree-id1816 . -28) (undo-tree-id1817 . -28) (undo-tree-id1818 . -28) (undo-tree-id1819 . -28) (undo-tree-id1820 . -28) (undo-tree-id1821 . -28) (undo-tree-id1822 . -28) (undo-tree-id1823 . -28) (undo-tree-id1824 . -28) (undo-tree-id1825 . -28) (undo-tree-id1826 . -28) (undo-tree-id1827 . -28) (undo-tree-id1828 . -28) (undo-tree-id1829 . -28) 267) nil (25796 61288 953230 323000) 0 nil])
([nil nil ((376 . 378) (#("  " 0 2 (part-side css)) . 375) (undo-tree-id1837 . -2) (374 . 378) (t 25796 61288 965438 409000)) nil (25796 63273 799558 34000) 0 nil])
([nil nil ((378 . 379)) nil (25796 63273 799554 743000) 0 nil])
([nil nil ((#("
" 0 1 (part-side css)) . -374) (undo-tree-id1832 . -1) (#("
" 0 1 (part-side css)) . -375) (undo-tree-id1833 . -1) (#(" " 0 1 (part-side css)) . -376) (undo-tree-id1834 . -1) (#(" " 0 1 (part-side css)) . -377) (undo-tree-id1835 . -1) (#("." 0 1 (part-side css)) . -378) (undo-tree-id1836 . -1) 379) nil (25796 63273 799552 517000) 0 nil])
([nil nil ((376 . 377)) nil (25796 63273 799538 256000) 0 nil])
([nil nil ((377 . 378)) nil (25796 63273 799537 198000) 0 nil])
([nil nil ((386 . 388) (#("{" 0 1 (part-side css face (rainbow-delimiters-depth-1-face))) . -386) (378 . 387)) nil (25796 63273 799535 830000) 0 nil])
([nil nil ((#("  " 0 2 (part-side css)) . 388) (388 . 390) (387 . 389)) nil (25796 63273 799533 881000) 0 nil])
([nil nil ((388 . 390)) nil (25796 63273 799531 377000) 0 nil])
([nil nil ((#(" " 0 1 (part-side css)) . -390) (nil rear-nonsticky nil 462 . 463) (nil part-side css 458 . 463) (nil part-side css 452 . 458) (nil face web-mode-css-property-name-face 452 . 458) (nil part-side css 443 . 452) (nil part-side css 430 . 443) (nil face web-mode-css-property-name-face 430 . 443) (nil part-side css 421 . 430) (nil part-side css 409 . 421) (nil face web-mode-css-property-name-face 409 . 421) (nil part-side css 399 . 409) (nil part-side css 391 . 399) (nil face web-mode-css-property-name-face 391 . 399) (nil part-side css 390 . 391) (390 . 463)) nil (25796 63273 799524 295000) 0 nil])
([nil nil ((#("5" 0 1 (part-side css)) . -458) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (#("0" 0 1 (part-side css)) . -459) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) 460 (t 25796 63273 812115 730000)) nil (25796 63309 448286 463000) 0 nil])
([nil current ((458 . 461)) nil (25796 63309 448263 721000) 0 nil])
nil
